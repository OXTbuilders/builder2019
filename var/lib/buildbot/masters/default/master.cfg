# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

from subprocess import check_output
reposs = check_output(["/home/shared/list_repos.sh"])
repos = reposs.decode('utf8').strip().split('\n')
reposslegacy = check_output(["/home/shared/list_repos_legacy.sh"])
reposlegacy = reposslegacy.decode('utf8').strip().split('\n')
repossall = check_output(["/home/shared/list_repos_all.sh"])
reposall = repossall.decode('utf8').strip().split('\n')

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("openxt1", "password"),
                worker.Worker("openxt2", "password"),
                worker.Worker("openxt32", "password")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
# Check all the repos for changes every 15 minutes
for repo in repos:
    c['change_source'].append(changes.GitPoller(
        'git://github.com/OpenXT/%s.git'%repo,
        branches = ['master', 'stable-9', 'stable-8', 'stable-7', 'stable-6'], #workdir='gitpoller-workdir/%s'%repo,
        pollinterval = 15 * 60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.Nightly(
    name='nightly',
    branch="master",
    builderNames=["openxt"],
    hour=22,
    minute=0,
    onlyIfChanged=True))
c['schedulers'].append(schedulers.Nightly(
    name='nightly9',
    branch="stable-9",
    builderNames=["openxt"],
    hour=0,
    minute=0,
    onlyIfChanged=True))
c['schedulers'].append(schedulers.Nightly(
    name='nightly8',
    branch="stable-8",
    builderNames=["openxt32"],
    hour=2,
    minute=0,
    onlyIfChanged=True))
c['schedulers'].append(schedulers.Nightly(
    name='nightly7',
    branch="stable-7",
    builderNames=["openxt32"],
    hour=4,
    minute=0,
    onlyIfChanged=True))
c['schedulers'].append(schedulers.Nightly(
    name='nightly6',
    branch="stable-6",
    builderNames=["openxt32"],
    hour=6,
    minute=0,
    onlyIfChanged=True))

prop = []
for repo in repos:
        prop.append(util.StringParameter(name=repo+"url", label=repo+" URL:", default="", size=40))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["openxt"],
                            properties=prop))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force32",
                            builderNames=["openxt32"],
                            properties=prop))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
factory.addStep(steps.Compile(command = ["bash", "-e", "./build.sh", util.Property('buildnumber'),
                                         util.Property('branch'), util.Property('layers'),
                                         util.Property('repos'), util.Property('ticket'), util.Property('distro')],
                        name = "Build",
                        description = "Building",
                        descriptionDone = "Build",
                        timeout = 12000))

factory32 = util.BuildFactory()
factory32.addStep(steps.Compile(command = ["bash", "-e", "./build32.sh", util.Property('buildnumber'),
                                           util.Property('branch'), util.Property('layers'),
                                           util.Property('repos'), util.Property('ticket'), util.Property('distro')],
                        name = "Build",
                        description = "Building",
                        descriptionDone = "Build",
                        timeout = 12000))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="openxt",
                       workernames=["openxt1", "openxt2"],
                       factory=factory))
c['builders'].append(
    util.BuilderConfig(name="openxt32",
                       workernames=["openxt32"],
                       factory=factory32))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "OpenXT"
c['titleURL'] = "https://github.com/OpenXT"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://167.114.211.70:8010/"

authz_cfg=util.Authz(
        allowRules = [
            util.ForceBuildEndpointMatcher(role="admins"),
            util.StopBuildEndpointMatcher(role='admins'),
            util.RebuildBuildEndpointMatcher(role='admins'),
            util.EnableSchedulerEndpointMatcher(role='admins')
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=['jed', 'eric', 'mahantesh'])
        ]
)

import subprocess
class MyAuth(util.CustomAuth):
    def check_credentials(self, user, password):
        res=subprocess.run(["htpasswd", "-vb", "/var/lib/buildbot/masters/default/.htpasswd", user, password])
        if res.returncode == 0:
            return True
        else:
            return False

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
                auth=MyAuth(),
                authz=authz_cfg)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

c['buildbotNetUsageData'] = None
